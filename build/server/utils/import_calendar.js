// Generated by CoffeeScript 1.9.3
var Event, NotificationHelper, async, calendar, fetchCalendar, fetchOnePage, getCalendarId, google, localizationManager, log, notification, oauth2Client, realtimer;

async = require('async');

google = require('googleapis');

calendar = google.calendar('v3');

log = require('printit')({
  date: true,
  prefix: 'utils:calendar'
});

Event = require('../models/event');

realtimer = require('./realtimer');

localizationManager = require('./localization_manager');

oauth2Client = require('./google_access_token').oauth2Client;

NotificationHelper = require('cozy-notifications-helper');

notification = new NotificationHelper('import-from-google');

getCalendarId = function(callback) {
  return calendar.calendarList.list({
    auth: oauth2Client
  }, function(err, response) {
    var calendarItem, found, i, len, ref, ref1, ref2;
    if (err) {
      return callback(err);
    }
    found = null;
    ref = response.items;
    for (i = 0, len = ref.length; i < len; i++) {
      calendarItem = ref[i];
      if (calendarItem.primary) {
        found = calendarItem.id;
      }
    }
    if (found == null) {
      found = (ref1 = response.items) != null ? (ref2 = ref1[0]) != null ? ref2.id : void 0 : void 0;
    }
    return callback(null, found);
  });
};

fetchOnePage = function(calendarId, pageToken, callback) {
  var params;
  params = {
    userId: 'me',
    auth: oauth2Client,
    calendarId: calendarId
  };
  if (pageToken !== "nopagetoken") {
    params.pageToken = pageToken;
  }
  log.debug('requesting more events');
  return calendar.events.list(params, function(err, result) {
    if (err) {
      log.debug("error " + err);
      return callback(err);
    } else {
      log.debug("got " + result.items.length + " events");
      return callback(null, result);
    }
  });
};

fetchCalendar = function(calendarId, callback) {
  var calendarEvents, isFinished, numberProcessed, pageToken;
  calendarEvents = [];
  numberProcessed = 0;
  pageToken = "nopagetoken";
  isFinished = function() {
    return (pageToken != null) && pageToken !== "nopagetoken";
  };
  return async.doWhilst(function(next) {
    return fetchOnePage(calendarId, pageToken, function(err, result) {
      if (err) {
        return next(err);
      }
      calendarEvents = calendarEvents.concat(result.items);
      pageToken = result.nextPageToken;
      return next(null);
    });
  }, isFinished, function(err) {
    if (err) {
      return callback(err);
    }
    log.debug("cozy to create " + calendarEvents.length + " events");
    return callback(null, calendarEvents);
  });
};

module.exports = function(access_token, callback) {
  oauth2Client.setCredentials({
    access_token: access_token
  });
  return calendar.calendarList.list({
    auth: oauth2Client
  }, function(err, response) {
    var allEvents, concatEvents, numberProcessed, totalNumber;
    if (err) {
      if (err) {
        log.error(err);
      }
      return callback(new Error('cant get calendar'));
    }
    totalNumber = 0;
    numberProcessed = 0;
    allEvents = [];
    concatEvents = function(calendarItem, next) {
      return fetchCalendar(calendarItem.id, function(err, gEvents) {
        if (err) {
          return next(err);
        }
        allEvents = allEvents.concat(gEvents);
        return next(null);
      });
    };
    return async.eachSeries(response.items, concatEvents, function(err) {
      if (err) {
        return callback(err);
      }
      return async.eachSeries(allEvents, function(gEvent, next) {
        var cozyEvent, ref, tag;
        if (!Event.validGoogleEvent(gEvent)) {
          log.error("invalid event");
          log.error(gEvent);
          realtimer.sendCalendar({
            number: ++numberProcessed,
            total: allEvents.length
          });
          return next(null);
        } else {
          cozyEvent = Event.fromGoogleEvent(gEvent);
          if (((ref = gEvent.organizer) != null ? ref.displayName : void 0) != null) {
            tag = "(Google) " + gEvent.organizer.displayName;
          } else {
            tag = 'google calendar';
          }
          cozyEvent.tags = [tag];
          log.debug("cozy create 1 event");
          return Event.createIfNotExist(cozyEvent, function(err) {
            if (err) {
              return callback(err);
            }
            if (err) {
              log.error(err);
            }
            realtimer.sendCalendar({
              number: ++numberProcessed,
              total: allEvents.length
            });
            return setTimeout(next, 100);
          });
        }
      }, function(err) {
        var _;
        if (err) {
          return callback(err);
        }
        log.info("create notification for events");
        _ = localizationManager.t;
        notification.createOrUpdatePersistent("leave-google-calendar", {
          app: 'import-from-google',
          text: _('notif_import_event', {
            total: numberProcessed
          }),
          resource: {
            app: 'calendar',
            url: 'calendar/'
          }
        });
        return callback();
      });
    });
  });
};
