// Generated by CoffeeScript 1.9.3
var Event, _, async, convertISO, cozydb, log, momentTz;

cozydb = require('cozydb');

momentTz = require('moment-timezone');

async = require('async');

log = require('printit')({
  date: true,
  prefix: 'model:event'
});

_ = require('lodash');

module.exports = Event = cozydb.getModel('Event', {
  start: {
    type: String
  },
  end: {
    type: String
  },
  place: {
    type: String
  },
  details: {
    type: String
  },
  description: {
    type: String
  },
  rrule: {
    type: String
  },
  tags: [String],
  attendees: {
    type: [Object]
  },
  related: {
    type: String,
    "default": null
  },
  timezone: {
    type: String
  },
  alarms: {
    type: [Object]
  },
  created: {
    type: String
  },
  lastModification: {
    type: String
  }
});

Event.dateFormat = 'YYYY-MM-DD';

Event.ambiguousDTFormat = 'YYYY-MM-DD[T]HH:mm:00.000';

Event.utcDTFormat = 'YYYY-MM-DD[T]HH:mm:00.000[Z]';

Event.alarmTriggRegex = /(\+?|-)PT?(\d+)(W|D|H|M|S)/;

convertISO = function(dateTimeTimezoned) {
  var err, res;
  if (!dateTimeTimezoned) {
    return false;
  }
  try {
    res = new Date(dateTimeTimezoned).toISOString();
  } catch (_error) {
    err = _error;
    log.error(err);
    log.error(dateTimeTimezoned);
    res = false;
  }
  return res;
};

Event.fromGoogleEvent = function(gEvent) {
  var data;
  data = {
    start: convertISO(gEvent.start.dateTime) || gEvent.start.date,
    end: convertISO(gEvent.end.dateTime) || gEvent.end.date,
    timezone: gEvent.start.timezone || gEvent.end.timezone,
    place: gEvent.location,
    details: gEvent.description,
    description: gEvent.summary
  };
  if (gEvent.recurrence) {
    data.rrule = gEvent.recurrence[0].substring("RRULE:".length);
  }
  return data;
};

Event.validGoogleEvent = function(gEvent) {
  var ref, ref1, ref2, ref3, valid;
  return valid = ((((ref = gEvent.start) != null ? ref.dateTime : void 0) != null) || (((ref1 = gEvent.start) != null ? ref1.date : void 0) != null)) && ((((ref2 = gEvent.end) != null ? ref2.dateTime : void 0) != null) || (((ref3 = gEvent.end) != null ? ref3.date : void 0) != null)) && (gEvent.summary != null);
};

Event.createIfNotExist = function(cozyEvent, callback) {
  return Event.request('byDate', {
    key: cozyEvent.start
  }, function(err, events) {
    var exist;
    if (err != null) {
      return callback(err);
    }
    exist = _.find(events, function(event) {
      return event.end === cozyEvent.end && event.description === cozyEvent.description;
    });
    if (exist) {
      log.info("event starting on " + cozyEvent.start + " already exist");
      return callback();
    } else {
      log.info("create event starting on " + cozyEvent.start);
      return Event.create(cozyEvent, callback);
    }
  });
};
